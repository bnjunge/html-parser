{"name":"PHP DOM HTML Parser","tagline":"Similar with PHP Simple Dom library, faster, more effective.","body":"**PHP DOM HTML Parser** uses built-in [PHP DOM extension](http://php.net/manual/en/book.dom.php) to process your requests, after testing, it is 10x faster than [PHP Simple HTML DOM Parser](http://simplehtmldom.sourceforge.net/)\r\n\r\nPHP DOM extension requires the libxml PHP extension. This means that passing in --enable-libxml is also required, although this is implicitly accomplished because libxml is enabled by default.\r\n\r\n# Examples\r\n\r\n## Getting Started\r\n\r\n```php\r\n$html = '<div>\r\ntest this library! <a href=\"https://github.com/shinbonlin\">PHP DOM HTML Parser</a>\r\n</div><div class=\"example\">test string!</div>\r\n```\r\n\r\nif you use Namespace\r\n```php\r\n$html_dom = new \\HtmlParser\\ParserDom($html);\r\n```\r\n\r\ncomment out the Namespace in line:2, if you don't use it\r\n```php\r\n$html_dom = new ParserDom($html);\r\n```\r\n\r\n\r\n## Basic usage\r\n\r\nFind all images\r\n```php\r\nforeach($html_dom->find('img') as $element) {\r\n       echo $element->src . '<br>';\r\n       echo $element->getAttr('src') . '<br>';\r\n}\r\n```\r\n\r\nFind all links \r\n```php\r\nforeach($html_dom->find('a') as $element) {\r\n       echo $element->href . '<br>';\r\n       echo $element->getAttr('href') . '<br>';\r\n}\r\n```\r\n\r\nFind all anchors, returns a array of element objects\r\n```php\r\n$ret = $html_dom->find('a');\r\n```\r\n\r\nFind (N)th anchor, returns element object or null if not found (zero based)\r\n```php\r\n$ret = $html_dom->find('a', 0);\r\n```\r\n\r\nFind lastest anchor, returns element object or null if not found (zero based)\r\n```php\r\n$ret = $html_dom->find('a', -1); \r\n```\r\n\r\nFind all `<div>` with the id attribute\r\n```php\r\n$ret = $html_dom->find('div[id]');\r\n```\r\n\r\nFind all `<div>` which attribute id=foo\r\n```php\r\n$ret = $html_dom->find('div[id=foo]');\r\n```\r\n## Advanced usage\r\nFind all element which id=foo\r\n```php\r\n$ret = $html_dom->find('#foo');\r\n```\r\n\r\nFind all element which class=foo\r\n```php\r\n$ret = $html_dom->find('.foo');\r\n```\r\n\r\nFind all HTML tags with the id attribute\r\n```php\r\n$ret = $html_dom->find('*[id]');\r\n```\r\n\r\nFind all anchors and images\r\n```php\r\n$ret = $html_dom->find('a, img');\r\n```\r\n\r\nFind all anchors and images with the \"title\" attribute\r\n```php\r\n$ret = $html_dom->find('a[title], img[title]');\r\n```\r\n## Descendant Seletors\r\n\r\nFind all <li> in <ul> \r\n```php\r\n$es = $html_dom->find('ul li');\r\n```\r\n\r\nFind Nested <div> tags\r\n```php\r\n$es = $html_dom->find('div div div'); \r\n```\r\n\r\nFind all <td> in <table> which class=hello\r\n```php\r\n$es = $html_dom->find('table.hello td');\r\n```\r\n\r\nFind all td tags with attribite align=center in table tags \r\n```php\r\n$es = $html_dom->find('table td[align=center]');\r\n```\r\n\r\n## Nested Seletors\r\n\r\nFind all <li> in <ul>\r\n```php\r\nforeach($html_dom->find('ul') as $ul) {\r\n       foreach($ul->find('li') as $li) {\r\n             // do something...\r\n       }\r\n}\r\n```\r\n\r\nFind first <li> in first <ul> \r\n```php\r\n$e = $html_dom->find('ul', 0)->find('li', 0);\r\n```\r\n\r\n## Attribute Selectors\r\n\r\nFilter | Description\r\n------------------\r\n[attribute] | Matches elements that have the specified attribute.\r\n[!attribute] | Matches elements that don't have the specified attribute.\r\n[attribute=value] | Matches elements that have the specified attribute with a certain value.\r\n[attribute!=value] | Matches elements that don't have the specified attribute with a certain value.\r\n[attribute^=value] | Matches elements that have the specified attribute and it starts with a certain value.\r\n[attribute$=value] | Matches elements that have the specified attribute and it ends with a certain value.\r\n[attribute*=value] | Matches elements that have the specified attribute and it contains a certain value.\r\n\r\n## FAQ\r\n\r\n### How to dump contents of DOM object?\r\n\r\nDumps the internal DOM tree back into string\r\n```php\r\n$str = $html_dom->save();\r\n```\r\n\r\nDumps the internal DOM tree back into a file\r\n```php \r\n$html_dom->save('result.htm');\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}