{"name":"PHP DOM HTML Parser","tagline":"Similar with PHP Simple Dom library, faster, more effective.","body":"**PHP DOM HTML Parser** uses built-in [PHP DOM extension](http://php.net/manual/en/book.dom.php) to process your requests, after testing, it is 10x faster than [PHP Simple HTML DOM Parser](http://simplehtmldom.sourceforge.net/)\r\n\r\nPHP DOM extension requires the libxml PHP extension. This means that passing in --enable-libxml is also required, although this is implicitly accomplished because libxml is enabled by default.\r\n\r\n# Examples\r\n\r\n***\r\n\r\n## Getting Started\r\n\r\n```php\r\n$html = '<div>\r\ntest this library! <a href=\"https://github.com/shinbonlin\">PHP DOM HTML Parser</a>\r\n</div><div class=\"example\">test string!</div>';\r\n```\r\n\r\nif you use Namespace\r\n```php\r\n$html_dom = new \\HtmlParser\\ParserDom($html);\r\n// the second parameter set \"true\" to use Tidy for cleaning up HTML source.\r\n// Need to enable PHP extension php_tidy.dll to use Tidy library, please check your php.ini or install php5-tidy.\r\n$html_dom = new \\HtmlParser\\ParserDom($html, true);\r\n```\r\n\r\nIf you comment out the Namespace in line:2\r\n```php\r\n$html_dom = new ParserDom($html);\r\n```\r\n\r\n\r\n## Basic\r\n\r\nFind all images\r\n```php\r\nforeach($html_dom->find('img') as $element) {\r\n       echo $element->src . '<br>';\r\n       echo $element->getAttr('src') . '<br>';\r\n}\r\n```\r\n\r\nFind all links \r\n```php\r\nforeach($html_dom->find('a') as $element) {\r\n       echo $element->href . '<br>';\r\n       echo $element->getAttr('href') . '<br>';\r\n}\r\n```\r\n\r\nFind all anchors, returns a array of element objects\r\n```php\r\n$ret = $html_dom->find('a');\r\n```\r\n\r\nFind (N)th anchor, returns element object or null if not found (zero based)\r\n```php\r\n$ret = $html_dom->find('a', 0);\r\n```\r\n\r\nFind lastest anchor, returns element object or null if not found (zero based)\r\n```php\r\n$ret = $html_dom->find('a', -1); \r\n```\r\n\r\nFind all `<div>` with the id attribute\r\n```php\r\n$ret = $html_dom->find('div[id]');\r\n```\r\n\r\nFind all `<div>` which attribute id=foo\r\n```php\r\n$ret = $html_dom->find('div[id=foo]');\r\n```\r\n## Advanced\r\n\r\nFind all element which id=foo\r\n```php\r\n$ret = $html_dom->find('#foo');\r\n```\r\n\r\nFind all element which class=foo\r\n```php\r\n$ret = $html_dom->find('.foo');\r\n```\r\n\r\nFind all HTML tags with the id attribute\r\n```php\r\n$ret = $html_dom->find('*[id]');\r\n```\r\n\r\nFind all anchors and images\r\n```php\r\n$ret = $html_dom->find('a, img');\r\n```\r\n\r\nFind all anchors and images with the \"title\" attribute\r\n```php\r\n$ret = $html_dom->find('a[title], img[title]');\r\n```\r\n## Descendant Seletors\r\n\r\nFind all `<li>` in `<ul> `\r\n```php\r\n$es = $html_dom->find('ul li');\r\n```\r\n\r\nFind Nested <div> tags\r\n```php\r\n$es = $html_dom->find('div div div'); \r\n```\r\n\r\nFind all `<td>` in `<table>` which class=hello\r\n```php\r\n$es = $html_dom->find('table.hello td');\r\n```\r\n\r\nFind all td tags with attribite align=center in table tags \r\n```php\r\n$es = $html_dom->find('table td[align=center]');\r\n```\r\n\r\n\r\n## Modify HTML \r\n\r\nModify class attribute\r\n```php\r\n$html_dom->find('div', 1)->class = 'bar';\r\n```\r\n\r\nModify inner text (HTML is allowed)\r\n```php\r\n$html_dom->find('div[id=hello]', 0)->innertext = 'foo';\r\n```\r\n\r\nModify outer HTML\r\n```php\r\n// this example will remove (destory) `<a>` element and replace with new element `<h1>` \r\n$html_dom->find('a', 0)->outertext = '<h1>Title Link</h1>';\r\n```\r\n\r\n\r\n## Nested Selectors\r\n\r\nFind all `<li>` in `<ul>`\r\n```php\r\nforeach($html_dom->find('ul') as $ul) {\r\n       foreach($ul->find('li') as $li) {\r\n             // do something...\r\n       }\r\n}\r\n```\r\n\r\nFind first `<li>` in first `<ul>` \r\n```php\r\n$e = $html_dom->find('ul', 0)->find('li', 0);\r\n```\r\n\r\n\r\n## Attribute Selectors\r\n\r\nFilter | Description\r\n------------ | -------------\r\n[attribute] | Matches elements that have the specified attribute.\r\n[!attribute] | Matches elements that don't have the specified attribute.\r\n[attribute=value] | Matches elements that have the specified attribute with a certain value.\r\n[attribute!=value] | Matches elements that don't have the specified attribute with a certain value.\r\n[attribute^=value] | Matches elements that have the specified attribute and it starts with a certain value.\r\n[attribute$=value] | Matches elements that have the specified attribute and it ends with a certain value.\r\n[attribute*=value] | Matches elements that have the specified attribute and it contains a certain value.\r\n\r\n\r\n## Magic Attribute\r\n\r\n```php\r\n// Example HTML: <div class=\"blue-color\">foo <b>bar</b></div> \r\n$e = $html_dom->find(\"div\", 0);\r\n\r\necho $e->outertext; // Returns: \"<div class=\"blue-color\">foo <b>bar</b></div>\"\r\necho $e->innertext; // Returns: \"foo <b>bar</b>\"\r\necho $e->plaintext; // Returns: \"foo bar\"\r\necho $e->tag; // Returns: \"div\" (current tag name)\r\necho $e->class; // Returns: \"blue-color\" \r\n```\r\n\r\nAttribute Name | Usage\r\n------------ | -------------\r\n$e->outertext | Read or write the outer HTML text of element.\r\n$e->innertext | Read or write the inner HTML text of element.\r\n$e->plaintext | Read or write the plain text of element.\r\n$e->tag | Read current tag name of element.\r\n$e->src | Read or write  \"src\" attribute of element.\r\n$e->class | Read or write  \"class\" attribute of element.\r\n$e->href | Read or write  \"href\" attribute of element.\r\n\r\nExcept outertext, innertext and plaintext, you can use $e->attribute_name to read or write attribute of element.\r\n\r\n\r\n## More Examples\r\n\r\nGet a attribute ( If the attribute is non-value attribute (eg. checked, selected...), it will returns true or false)\r\n```php\r\n$value = $e->href;\r\n```\r\n\r\nSet a attribute(If the attribute is non-value attribute (eg. checked, selected...), set it's value as true or false)\r\n```php\r\n$e->href = 'my link';\r\n```\r\n\r\nRemove a attribute, set it's value as null! \r\n```php\r\n$e->href = null;\r\n```\r\n\r\nDetermine whether a attribute exist? \r\n```php\r\nif (isset($e->href)) echo 'href exist!';\r\n```\r\n\r\nExtract contents from HTML\r\n```php\r\necho $html->plaintext;\r\n```\r\n\r\nWrap a element\r\n```php\r\n$e->outertext = '<div class=\"wrap\">' . $e->outertext . '<div>';\r\n```\r\n\r\nRemove a element, set it's outertext as an empty string \r\n```php\r\n$e->outertext = '';\r\n```\r\n\r\nAppend a element\r\n```php\r\n$e->outertext = $e->outertext . '<div>foo<div>';\r\n```\r\n\r\nInsert a element\r\n```php\r\n$e->outertext = '<div>foo<div>' . $e->outertext;\r\n```\r\n\r\nDumps the internal DOM tree back into string\r\n```php\r\n$str = $html_dom->save();\r\n```\r\n\r\nDumps the internal DOM tree back into a file\r\n```php \r\n$html_dom->save('result.htm');\r\n```\r\n\r\n\r\n## Free Memory\r\n\r\nScript will free memory automatically, however, if you would like to do it manually\r\n```php \r\n$html_dom->clear();\r\n```\r\n\r\n\r\n## Extension\r\n\r\nYou can use PHP DOM extension as the following code:\r\n```php \r\n$html_dom->node\r\n\r\n$html_dom->node->childNodes\r\n$html_dom->node->parentNode\r\n$html_dom->node->firstChild\r\n$html_dom->node->lastChild\r\n```\r\nFor more information, please visit [http://php.net/manual/en/book.dom.php](http://php.net/manual/en/book.dom.php)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}